### following taken from seqTrial
ifelse1 <- function(test, yes, no){
  # Return yes if test is TRUE, else no.
  # Like ifelse(), except that test is not a vector, and yes or no
  #  is returned as is (whatever its length).
  if(test)
    yes
  else
    no
}

is.whole <- function(x){
  ## takes in vector/matrix of numerics
  ## returns TRUE/FALSE whether all numbers are whole numbers
  stopifnot(is.numeric(x))
  all(floor(x)==x)
}
## is.whole(1:5) ; is.whole(1) ; is.whole(c(1,1.2))

oneTo <- function(x){
  ## takes in vector of positive integers
  ## returns vector of 
  stopifnot( is.whole(x), x > 0 )
  eval(parse(text=
    paste('c(', paste('1:', x, collapse=',', sep=''), ')', sep='')
             ))
}
## oneTo(1:5) ; oneTo( c(1,10,2) )

string.vector <- function(string, sep=','){
  ## takes in a string with a separator
  ## returns a vector of string, each element being the value separated in input
  eval(parse(text=paste('c("', paste(unlist(strsplit(string, split=sep)), collapse='","', sep=''), '")', sep='')))
}
## string.vector('vinh, ox, you')

### Thomas Lumley (R News Sept 2001)
defmacro <- function(..., expr){
  expr <- substitute(expr)
  a <- substitute(list(...))[-1]
  ## process the argument list
  nn <- names(a)
  if (is.null(nn)) nn <- rep("", length(a))
  for(i in seq(length=length(a))) {
    if (nn[i] == "") {
      nn[i] <- paste(a[[i]])
      msg <- paste(a[[i]], "not supplied")
      a[[i]] <- substitute(stop(foo),
                           list(foo = msg))
    }
  }
  names(a) <- nn
  a <- as.list(a)
  ## this is where the work is done
  ff <- eval(substitute(
                        function(){
                          tmp <- substitute(body)
                          eval(tmp, parent.frame())
                        },
                        list(body = expr)))
  ## add the argument list
  formals(ff) <- a
  ## create a fake source attribute
  mm <- match.call()
  mm$expr <- NULL
  mm[[1]] <- as.name("macro")
  attr(ff, "source") <- c(deparse(mm),
                          deparse(expr))
  ## return the 'macro'
  ff
}

